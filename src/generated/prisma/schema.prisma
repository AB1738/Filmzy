// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  userId      String       @unique
  firstName   String
  // imageUrl    String
  comments    Comment[]
  likedMovies LikedMovie[]
  watchList   WatchList[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  author    User     @relation(fields: [authorId], references: [userId])
  authorId  String
  movie     Movie    @relation(fields: [movieId], references: [movieId])
  movieId   Int
  replies   Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  replyTo   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
}

model Movie {
  id            Int          @id @default(autoincrement())
  movieId       Int          @unique
  title         String
  backdrop_path String
  overview      String
  release_date  String
  comments      Comment[]
  likes         LikedMovie[]
  watchlists    WatchList[]
  // genres        String[]
}

model LikedMovie {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [userId])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [movieId])
  movieId   Int
  createdAt DateTime @default(now())

  @@unique(name: "liked_user_movie_id", [userId, movieId])
}

model WatchList {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [userId])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [movieId])
  movieId   Int
  createdAt DateTime @default(now())

  @@unique([userId, movieId], name: "watchlist_user_movie_id")
}
